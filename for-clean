@Library('gph-neo-jenkins-library') _

pipeline {
    agent any
    parameters {
        choice(
            name: 'ENV',
            choices: ['dev', 'uat', 'prod'],
            description: 'Choose the target environment'
        )
        string(name: 'TIMEOUT', defaultValue: '15', description: 'Timeout duration', trim: true)
    }
    options {
        timeout(time: params.TIMEOUT, unit: 'MINUTES')
        buildDiscarder logRotator(numToKeepStr: '10')
    }
    environment {
        AWS_ROLE_ACCOUNT = "${AwsRoleAndAccount(params.ENV)?.ACCOUNT}"
        AWS_ROLE = "${AwsRoleAndAccount(params.ENV)?.ROLE}"
        JENKINS_CRED = credentials('jenkins-service')
        JOB_NAME = JOB_NAME.split('/').last()
        KUBECONFIG = '/etc/kubernetes/kubeconfig'

    }
    stages {
        stage('List Kubernetes Deployments') {
            steps {
                script {
                    // Authenticate with AWS and configure kubectl
                    withAWS(roleAccount: env.AWS_ROLE_ACCOUNT, role: env.AWS_ROLE) {
                    // Get all deployments across all namespaces and store in a variable
                    def deployments = sh(
                        script: "kubectl get deployments --all-namespaces -o custom-columns='NAMESPACE:.metadata.namespace,NAME:.metadata.name' --no-headers",
                        returnStdout: true
                    ).trim()
                    
                    // Parse the output and create a map of namespace to deployments
                    def deploymentMap = [:]
                    deployments.split('\n').each { line ->
                        def (namespace, deploymentName) = line.split()
                        if (!deploymentMap[namespace]) {
                            deploymentMap[namespace] = []
                        }
                        deploymentMap[namespace] << deploymentName
                    }
                    
                    // Store the deployment map for later use
                    env.DEPLOYMENT_MAP = groovy.json.JsonOutput.toJson(deploymentMap)
                    
                    // Print the found deployments in a more organized format
                    echo "==================== Kubernetes Deployments Summary ===================="
                    echo "\nTotal namespaces found: ${deploymentMap.size()}\n"
                    
                    deploymentMap.each { namespace, deps ->
                        echo "📁 Namespace: ${namespace}"
                        echo "   Total deployments: ${deps.size()}"
                        echo "   Deployments:"
                        deps.each { dep ->
                            echo "   └─ ${dep}"
                        }
                        echo "----------------------------------------------------------------"
                    }
                    echo "\n================================================================"
                 }
                }
            }
        }
    }
}
