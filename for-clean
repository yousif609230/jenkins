@Library('gph-neo-jenkins-library') _

def monitorPodStatus(namespace, deploymentName) {
    echo "🔄 Monitoring pod status for deployment ${deploymentName} in namespace ${namespace}..."
    def stable = false
    def attempts = 0
    def maxAttempts = params.TIMEOUT.toInteger() * 12  // Convert minutes to 5-second intervals (12 checks per minute)
    
    while (!stable && attempts < maxAttempts) {
        def podStatus = sh(
            script: "kubectl get pods -n ${namespace} -l app=${deploymentName} -o wide",
            returnStdout: true
        ).trim()
        
        echo "📊 Current Pod Status (Attempt ${attempts + 1}/${maxAttempts}):"
        echo podStatus
        
        // Check if all pods are running and ready
        def allPodsReady = sh(
            script: """
                kubectl get pods -n ${namespace} -l app=${deploymentName} -o json | \
                jq -r '.items[] | select(.status.phase=="Running") | .status.containerStatuses[].ready' | \
                grep -v false || true
            """,
            returnStdout: true
        ).trim()
        
        if (allPodsReady) {
            stable = true
            echo "✅ All pods are running and ready for deployment ${deploymentName}"
        } else {
            echo "⏳ Waiting for pods to stabilize... (checking again in 5 seconds)"
            sleep 5
            attempts++
        }
    }
    
    if (!stable) {
        error "❌ Timeout waiting for pods to stabilize for deployment ${deploymentName} after ${params.TIMEOUT} minutes"
    }
}

pipeline {
    agent any
    parameters {
        choice(
            name: 'ENV',
            choices: ['dev', 'uat', 'prod'],
            description: 'Choose the target environment'
        )
        string(name: 'TIMEOUT', defaultValue: '15', description: 'Timeout duration', trim: true)
    }
    options {
        timeout(time: params.TIMEOUT, unit: 'MINUTES')
        buildDiscarder logRotator(numToKeepStr: '10')
    }
    environment {
        AWS_ROLE_ACCOUNT = "${AwsRoleAndAccount(params.ENV)?.ACCOUNT}"
        AWS_ROLE = "${AwsRoleAndAccount(params.ENV)?.ROLE}"
        JENKINS_CRED = credentials('jenkins-service')
        JOB_NAME = JOB_NAME.split('/').last()
        KUBECONFIG = '/etc/kubernetes/kubeconfig'

    }
    stages {
        stage('List Kubernetes Deployments') {
            steps {
                script {
                    // Authenticate with AWS and configure kubectl
                    withAWS(roleAccount: env.AWS_ROLE_ACCOUNT, role: env.AWS_ROLE) {
                    // Get all deployments across all namespaces and store in a variable
                    def deployments = sh(
                        script: "kubectl get deployments --all-namespaces -o custom-columns='NAMESPACE:.metadata.namespace,NAME:.metadata.name' --no-headers",
                        returnStdout: true
                    ).trim()
                    
                    // Parse the output and create a map of namespace to deployments
                    def deploymentMap = [:]
                    deployments.split('\n').each { line ->
                        def (namespace, deploymentName) = line.split()
                        if (!deploymentMap[namespace]) {
                            deploymentMap[namespace] = []
                        }
                        deploymentMap[namespace] << deploymentName
                    }
                    
                    // Store the deployment map for later use
                    env.DEPLOYMENT_MAP = groovy.json.JsonOutput.toJson(deploymentMap)
                    
                    // Print the found deployments in a more organized format
                    echo "==================== Kubernetes Deployments Summary ===================="
                    echo "\nTotal namespaces found: ${deploymentMap.size()}\n"
                    
                    deploymentMap.each { namespace, deps ->
                        echo "📁 Namespace: ${namespace}"
                        echo "   Total deployments: ${deps.size()}"
                        echo "   Deployments:"
                        deps.each { dep ->
                            echo "   └─ ${dep}"
                        }
                        echo "----------------------------------------------------------------"
                    }
                    echo "\n================================================================"
                 }
                }
            }
        }
        stage('Select Deployment') {
            steps {
                script {
                    // Parse the deployment map back from JSON
                    def deploymentMap = readJSON text: env.DEPLOYMENT_MAP
                    
                    // Define excluded namespaces
                    def excludedNamespaces = ['kube-system', 'argocd']
                    
                    // Create a list of deployment choices in format "namespace/deployment"
                    def deploymentChoices = []
                    deploymentMap.each { namespace, deps ->
                        // Skip excluded namespaces
                        if (!excludedNamespaces.contains(namespace)) {
                            deps.each { deployment ->
                                deploymentChoices << "${namespace}/${deployment}"
                            }
                        }
                    }
                    
                    if (deploymentChoices.isEmpty()) {
                        error("No deployments found in allowed namespaces.")
                    }
                    
                    // Show input dialog with deployment choices
                    env.SELECTED_DEPLOYMENT_FULL = input(
                        message: 'Select Deployment to Restart',
                        ok: 'Select',
                        parameters: [
                            choice(
                                name: 'DEPLOYMENT_CHOICE',
                                choices: deploymentChoices,
                                description: 'Select the deployment to restart'
                            )
                        ]
                    ).trim()
                    
                    // Store the selection in environment variables for next stages
                    def parts = env.SELECTED_DEPLOYMENT_FULL.split('/')
                    env.SELECTED_NAMESPACE = parts[0]
                    env.SELECTED_DEPLOYMENT = parts[1]
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    // Show verification input with deployment details
                    def confirmation = input(
                        message: """
                           ====== Verify Deployment Restart ======
                           Namespace: ${env.SELECTED_NAMESPACE}
                           Deployment: ${env.SELECTED_DEPLOYMENT}
                           Environment: ${params.ENV}
                           
                           Type 'confirm' below to restart this deployment
                           =======================================
                           """,
                        ok: 'Proceed',
                        parameters: [
                            string(
                                defaultValue: '',
                                name: 'CONFIRMATION',
                                description: "Type 'confirm' to restart deployment: ${env.SELECTED_DEPLOYMENT} in namespace: ${env.SELECTED_NAMESPACE}"
                            )
                        ]
                    )
                    
                    if (!confirmation.equals('confirm')) {
                        error("Deployment restart cancelled: Confirmation text did not match 'confirm'")
                    }
                    
                    echo """
                    ====== Deployment Verified ======
                    Proceeding to restart:
                    Namespace: ${env.SELECTED_NAMESPACE}
                    Deployment: ${env.SELECTED_DEPLOYMENT}
                    ================================"""
                }
            }
        }
        
        stage('Restart Deployment') {
            steps {
                script {
                    echo """
                    ====== Restarting Deployment ======
                    Namespace: ${env.SELECTED_NAMESPACE}
                    Deployment: ${env.SELECTED_DEPLOYMENT}
                    ================================"""
                    
                    // Restart the deployment
                    withAWS(roleAccount: env.AWS_ROLE_ACCOUNT, role: env.AWS_ROLE) {
                        sh """
                            kubectl rollout restart deployment/${env.SELECTED_DEPLOYMENT} -n ${env.SELECTED_NAMESPACE}
                        """
                    }
                    
                    // Monitor the deployment status
                    monitorPodStatus(env.SELECTED_NAMESPACE, env.SELECTED_DEPLOYMENT)
                    
                    echo """
                    ====== Deployment Restart Complete ======
                    The deployment ${env.SELECTED_DEPLOYMENT} in namespace ${env.SELECTED_NAMESPACE} has been successfully restarted
                    ========================================"""
                }
            }
        }
    }
}
